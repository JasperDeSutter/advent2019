use advent19::Program;

const AIRCO_CODE: &[i32] = &[
    3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1001, 152, 55, 224, 1001, 224, -68, 224, 4,
    224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 224, 223, 223, 1101, 62, 41, 225, 1101, 83, 71,
    225, 102, 59, 147, 224, 101, -944, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1,
    224, 223, 223, 2, 40, 139, 224, 1001, 224, -3905, 224, 4, 224, 1002, 223, 8, 223, 101, 7, 224,
    224, 1, 223, 224, 223, 1101, 6, 94, 224, 101, -100, 224, 224, 4, 224, 1002, 223, 8, 223, 101,
    6, 224, 224, 1, 224, 223, 223, 1102, 75, 30, 225, 1102, 70, 44, 224, 101, -3080, 224, 224, 4,
    224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 223, 224, 223, 1101, 55, 20, 225, 1102, 55, 16,
    225, 1102, 13, 94, 225, 1102, 16, 55, 225, 1102, 13, 13, 225, 1, 109, 143, 224, 101, -88, 224,
    224, 4, 224, 1002, 223, 8, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1002, 136, 57, 224, 101,
    -1140, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224, 1, 223, 224, 223, 101, 76, 35,
    224, 1001, 224, -138, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 223, 224, 223, 4,
    223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105,
    1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105,
    1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225,
    225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225,
    225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1008, 677, 677, 224, 1002, 223, 2, 223,
    1006, 224, 329, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 344, 101, 1,
    223, 223, 1107, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 359, 1001, 223, 1, 223, 1108, 677,
    226, 224, 102, 2, 223, 223, 1005, 224, 374, 1001, 223, 1, 223, 1007, 226, 226, 224, 102, 2,
    223, 223, 1006, 224, 389, 1001, 223, 1, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1005, 224,
    404, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 419, 1001, 223, 1,
    223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 434, 101, 1, 223, 223, 1008, 677, 226, 224,
    102, 2, 223, 223, 1006, 224, 449, 1001, 223, 1, 223, 7, 677, 677, 224, 102, 2, 223, 223, 1006,
    224, 464, 1001, 223, 1, 223, 8, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 479, 1001, 223, 1,
    223, 7, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 494, 1001, 223, 1, 223, 7, 677, 226, 224,
    1002, 223, 2, 223, 1005, 224, 509, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223,
    1006, 224, 524, 101, 1, 223, 223, 1007, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 539, 101,
    1, 223, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 554, 101, 1, 223, 223, 1008,
    226, 226, 224, 102, 2, 223, 223, 1006, 224, 569, 1001, 223, 1, 223, 1107, 677, 226, 224, 1002,
    223, 2, 223, 1005, 224, 584, 101, 1, 223, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005,
    224, 599, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 614, 101, 1, 223,
    223, 108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 629, 101, 1, 223, 223, 107, 226, 677,
    224, 102, 2, 223, 223, 1006, 224, 644, 1001, 223, 1, 223, 1108, 226, 226, 224, 1002, 223, 2,
    223, 1006, 224, 659, 101, 1, 223, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 674,
    101, 1, 223, 223, 4, 223, 99, 226,
];

fn main() {
    let mut prog = Program::new(AIRCO_CODE);
    prog.input = Some(1);
    prog.run();
    println!("airco output: {:?}", prog.output.unwrap());

    let mut prog = Program::new(AIRCO_CODE);
    prog.input = Some(5);
    prog.run();
    println!("diagnostic code: {:?}", prog.output.unwrap());
}

#[cfg(test)]
mod tests {
    use advent19::Program;

    fn run_intcode(intcode: &[i32], input: i32) -> i32 {
        let mut program = Program::new(intcode);
        program.input = Some(input);
        program.run();
        program.output.unwrap()
    }

    #[test]
    fn example1() {
        let mut program = Program::new(&[1002, 4, 3, 4, 33] as &[i32]);
        program.run();
        assert_eq!(program.into_code(), vec![1002, 4, 3, 4, 99]);
    }

    #[test]
    fn example2() {
        const CODE: &[i32] = &[3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8];
        assert_eq!(run_intcode(CODE, 8), 1);
        assert_eq!(run_intcode(CODE, 7), 0);
    }

    #[test]
    fn example3() {
        const CODE: &[i32] = &[3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8];
        assert_eq!(run_intcode(CODE, 7), 1);
        assert_eq!(run_intcode(CODE, 9), 0);
    }

    #[test]
    fn example4() {
        const CODE: &[i32] = &[3, 3, 1108, -1, 8, 3, 4, 3, 99];
        assert_eq!(run_intcode(CODE, 8), 1);
        assert_eq!(run_intcode(CODE, 9), 0);
    }

    #[test]
    fn example5() {
        const CODE: &[i32] = &[3, 3, 1107, -1, 8, 3, 4, 3, 99];
        assert_eq!(run_intcode(CODE, 7), 1);
        assert_eq!(run_intcode(CODE, 9), 0);
    }

    #[test]
    fn example6() {
        const CODE: &[i32] = &[3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9];
        assert_eq!(run_intcode(CODE, 0), 0);
        assert_eq!(run_intcode(CODE, 5), 1);
    }

    #[test]
    fn example7() {
        const CODE: &[i32] = &[3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1];
        assert_eq!(run_intcode(CODE, 0), 0);
        assert_eq!(run_intcode(CODE, -1), 1);
    }

    #[test]
    fn example8() {
        const CODE: &[i32] = &[
            3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 0,
            0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4,
            20, 1105, 1, 46, 98, 99,
        ];
        assert_eq!(run_intcode(CODE, 6), 999);
        assert_eq!(run_intcode(CODE, 8), 1000);
        assert_eq!(run_intcode(CODE, 10), 1001);
    }
}
